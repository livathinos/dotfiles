" plugins {{{1

set nocompatible

" vundle needs filtype plugins off
" i turn it on later
filetype plugin indent off
syntax off

set rtp+=~/.vim/bundle/Vundle.vim

" start vundle environment
call vundle#begin()

Plugin 'gmarik/Vundle.vim'

Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'jgdavey/vim-blockle'
Plugin 'rking/ag.vim'
Plugin 'kien/ctrlp.vim'
Plugin 'airblade/vim-gitgutter'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-endwise'
Plugin 'elixir-lang/vim-elixir'
Plugin 'mustache/vim-mustache-handlebars'
Plugin 'thoughtbot/vim-rspec'
Plugin 'tpope/vim-surround'
Plugin 'guns/vim-clojure-static'
Plugin 'tpope/vim-fireplace'
Plugin 'tyrannicaltoucan/vim-deep-space'
Plugin 'luochen1990/rainbow'

" add plugins before this
call vundle#end()

filetype plugin indent on
syntax on

" Search with the silver searcher
map ,a :Ag<SPACE>
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/.tmp/*,*/.sass-cache/*,*/node_modules/*,*.keep,*.DS_Store,*/.git/*
if executable('ag')
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

" bind K to project wide search for word under cursor
nnoremap K :Ag "\b<C-R><C-W>\b"<CR>:cw<CR>

" NERDTree toggle
nmap <silent> <C-D> :NERDTreeToggle<CR>

" don't create swaps
set noswapfile

let g:gitgutter_sign_column_always = 0
let g:gitgutter_enabled = 1
let g:gitgutter_realtime = 1

set mouse=a
map <ScrollWheelUp> <C-Y>
map <ScrollWheelDown> <C-E>

" Splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

set splitbelow
set splitright

" Colon to semicolon
:nmap ; :

"Auto completion
imap <Tab> <C-P>
set complete=.,b,u,]
set wildmode=longest,list:longest
set completeopt=menu,preview

set background=dark
colorscheme deep-space
let g:deepspace_italics = 1 " Enable terminal italics
let g:airline_theme='deep_space'
if (empty($TMUX))
    if (has("nvim"))
        "For Neovim 0.1.3 and 0.1.4
        let $NVIM_TUI_ENABLE_TRUE_COLOR=1
    endif

    "For Neovim 0.1.5+ and Vim 7.4.1799+
    if (has("termguicolors"))
        set termguicolors
    endif
endif
"colorscheme Tomorrow-Night-Eighties

set shell=/bin/sh

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" STATUS LINE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set laststatus=2
let g:airline_powerline_fonts = 1

" Numbers
set number
set numberwidth=5

set nocompatible                " choose no compatibility with legacy vi
set encoding=utf-8
set showcmd                     " display incomplete commands

"" Whitespace
set nowrap                      " don't wrap lines
set tabstop=2 shiftwidth=2      " a tab is two spaces (or set this to 4)
set expandtab                   " use spaces, not tabs (optional)
set backspace=indent,eol,start  " backspace through everything in insert mode
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
highlight OverLength ctermbg=red ctermfg=white guibg=#444444

set wildignore=*/vendor/*

"" Searching
set hlsearch                    " highlight matches
set incsearch                   " incremental searching
set ignorecase                  " searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter

set backupdir=~/.vim/tmp
set directory=~/.vim/tmp
set guioptions=egmt
set guifont=monaco:h10

imap <c-l> <space>=><space>

"" 80 CHAR COLUMN
set textwidth=80

noremap <s-tab> <c-n>

" Strip whitespace
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()

" Per directory vimrc files
set exrc            " enable per-directory .vimrc files
set secure          " disable unsafe commands in local .vimrc files

" Copy from vim
map <C-C> :w !pbcopy<CR><CR>

" Highlight the current line
" set cursorline
" hi CursorLine guibg=Grey40
hi Search cterm=NONE ctermfg=white ctermbg=blue

" Don't use tabs for auto completion at the beginning of lines
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

" RSpec.vim mappings
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
let g:rspec_command = "!bundle exec rspec --drb {spec}"

" Copy file path to clipboard
nmap ,cl :let @*=expand("%:p")<CR>

inoremap <tab> <c-r>=InsertTabWrapper()<cr>

" Rainbow parentheses
let g:rainbow_active = 1
